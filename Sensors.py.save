import RPi.GPIO as GPIO, time
import paho.mqtt.client as mqtt
import sys
import time

# Pines
GPIO.setmode(GPIO.BCM)
Pin_gas = 18
Pin_fuego = 23
Pin_HumeTemp = 17
DHTPIN = Pin_HumeTemp
#Humedad y temperatura, estado y contadores

MAX_UNCHANGE_COUNT = 100

STATE_INIT_PULL_DOWN = 1
STATE_INIT_PULL_UP = 2
STATE_DATA_FIRST_PULL_DOWN = 3
STATE_DATA_PULL_UP = 4
STATE_DATA_PULL_DOWN = 5

# Declaramos
broker_address = "aulal.org"
topic_gas = "/gas"
topic_fuego = "/fuego"
topic_humedad = "/humedad"
topic_temperatura = "/temperatura"
puerto = 1883
Gas = mqtt.Client()
Fuego = mqtt.Client()
Humedad = mqtt.Client()
Temperatura = mqtt.Client()
GPIO.setmode(GPIO.BCM)
GPIO.setup(Pin_gas, GPIO.IN)
GPIO.setup(Pin_fuego, GPIO.IN)

def read_dht11_dat():
	GPIO.setup(DHTPIN, GPIO.OUT)
	GPIO.output(DHTPIN, GPIO.HIGH)
	time.sleep(0.05)
	GPIO.output(DHTPIN, GPIO.LOW)
	time.sleep(0.02)
	GPIO.setup(DHTPIN, GPIO.IN, GPIO.PUD_UP)

	unchanged_count = 0
	last = -1
	data = []
	while True:
		current = GPIO.input(DHTPIN)
		data.append(current)
		if last != current:
			unchanged_count = 0
			last = current
		else:
			unchanged_count += 1
			if unchanged_count > MAX_UNCHANGE_COUNT:
				break

	state = STATE_INIT_PULL_DOWN

	lengths = []
	current_length = 0

	for current in data:
		current_length += 1

		if state == STATE_INIT_PULL_DOWN:
			if current == GPIO.LOW:
				state = STATE_INIT_PULL_UP
			else:
				continue
		if state == STATE_INIT_PULL_UP:
			if current == GPIO.HIGH:
				state = STATE_DATA_FIRST_PULL_DOWN
			else:
				continue
		if state == STATE_DATA_FIRST_PULL_DOWN:
			if current == GPIO.LOW:
				state = STATE_DATA_PULL_UP
			else:
				continue
		if state == STATE_DATA_PULL_UP:
			if current == GPIO.HIGH:
				current_length = 0
				state = STATE_DATA_PULL_DOWN
			else:
				continue
		if state == STATE_DATA_PULL_DOWN:
			if current == GPIO.LOW:
				lengths.append(current_length)
				state = STATE_DATA_PULL_UP
			else:
				continue
	if len(lengths) != 40:
		print("...")
		return False

	shortest_pull_up = min(lengths)
	longest_pull_up = max(lengths)
	halfway = (longest_pull_up + shortest_pull_up) / 2
	bits = []
	the_bytes = []
	byte = 0

	for length in lengths:
		bit = 0
		if length > halfway:
			bit = 1
		bits.append(bit)
	print("bits: %s, length: %d" % (bits, len(bits)))
	for i in range(0, len(bits)):
		byte = byte << 1
		if (bits[i]):
			byte = byte | 1
		else:
			byte = byte | 0
		if ((i + 1) % 8 == 0):
			the_bytes.append(byte)
			byte = 0
	print(the_bytes)
	checksum = (the_bytes[0] + the_bytes[1] + the_bytes[2] + the_bytes[3]) & 0xFF
	if the_bytes[4] != checksum:
		print("...")
		return False

	return the_bytes[0], the_bytes[2]


#codigo
try:
    Gas.connect(broker_address)
    Gas.subscribe(topic_gas)
    Fuego.connect(broker_address)
    Fuego.subscribe(topic_fuego)
    Humedad.connect(broker_address)
    Humedad.subscribe(topic_fuego)
    Temperatura.connect(broker_address)
    Temperatura.subscribe(topic_fuego)
    while True:
        if GPIO.input(18):
                print("Gas")
                time.sleep(0.2)
                Gas.publish(topic_gas, "{Gas:1}")
        if GPIO.input(23):
                print("Fuego")
                time.sleep(0.2)
                Fuego.publish(topic_fuego, "{Fuego:1}")
        if GPIO.input(18)!=1 and GPIO.input(23)!=1:
                print("Gas:0 and Fuego:0")
                time.sleep(0.2)
                Gas.publish(topic_gas, "{Gas:0}")
                Fuego.publish(topic_fuego, "{Fuego:0}")
        result = read_dht11_dat()
        if result:
	    humidity, temperature = result
	    print("humidity: %s,  Temperature: %s" % (humidity, temperature))
	    humidity = "{Humedad: "+str(humidity)+"}"
            temperature = "{Temperatura: "+str(temperature)+"}"
            Humedad.publish(topic_humedad, humidity)
            Temperatura.publish(topic_temperatura, temperature)
		if GPIO.input(18):
        	        print("Gas")
       		        time.sleep(0.2)
                	Gas.publish(topic_gas, "{Gas:1}")
        	if GPIO.input(23):
                	print("Fuego")
                	time.sleep(0.2)
                Fu	ego.publish(topic_fuego, "{Fuego:1}")
        if GPIO.input(18)!=1 and GPIO.input(23)!=1:
                print("Gas:0 and Fuego:0")
                time.sleep(0.2)
                Gas.publish(topic_gas, "{Gas:0}")
                Fuego.publish(topic_fuego, "{Fuego:0}")
        result = read_dht11_dat()

            time.sleep(5)

# Cerramos el script
except KeyboardInterrupt:
    print("ERROR")
    GPIO.cleanup()
